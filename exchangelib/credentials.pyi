import abc
from .errors import InvalidTypeError as InvalidTypeError
from _typeshed import Incomplete

log: Incomplete
IMPERSONATION: str
DELEGATE: str
ACCESS_TYPES: Incomplete

class BaseCredentials(metaclass=abc.ABCMeta):
    def __eq__(self, other): ...
    def __hash__(self): ...

class Credentials(BaseCredentials):
    EMAIL: str
    DOMAIN: str
    UPN: str
    type: Incomplete
    username: Incomplete
    password: Incomplete
    def __init__(self, username, password) -> None: ...

class BaseOAuth2Credentials(BaseCredentials, metaclass=abc.ABCMeta):
    client_id: Incomplete
    client_secret: Incomplete
    tenant_id: Incomplete
    identity: Incomplete
    def __init__(self, client_id, client_secret, tenant_id: Incomplete | None = None, identity: Incomplete | None = None, access_token: Incomplete | None = None) -> None: ...
    @property
    def lock(self): ...
    @property
    def access_token(self): ...
    @access_token.setter
    def access_token(self, access_token) -> None: ...
    def refresh(self, session) -> None: ...
    def on_token_auto_refreshed(self, access_token) -> None: ...
    def sig(self): ...
    @property
    def token_url(self): ...
    @property
    def scope(self): ...
    def session_params(self): ...
    @staticmethod
    def token_params(): ...
    @abc.abstractmethod
    def client(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class OAuth2Credentials(BaseOAuth2Credentials):
    def client(self): ...

class OAuth2LegacyCredentials(OAuth2Credentials):
    username: Incomplete
    password: Incomplete
    def __init__(self, username, password, **kwargs) -> None: ...
    def token_params(self): ...
    def client(self): ...
    @property
    def scope(self): ...

class OAuth2AuthorizationCodeCredentials(BaseOAuth2Credentials):
    authorization_code: Incomplete
    def __init__(self, authorization_code: Incomplete | None = None, **kwargs) -> None: ...
    @property
    def scope(self): ...
    def token_params(self): ...
    def client(self): ...

class O365InteractiveCredentials(OAuth2AuthorizationCodeCredentials):
    AUTHORITY: str
    SCOPE: Incomplete
    def __init__(self, client_id, username) -> None: ...
