import abc
from ..errors import ErrorAccessDenied as ErrorAccessDenied, ErrorCannotDeleteObject as ErrorCannotDeleteObject, ErrorCannotEmptyFolder as ErrorCannotEmptyFolder, ErrorDeleteDistinguishedFolder as ErrorDeleteDistinguishedFolder, ErrorFolderNotFound as ErrorFolderNotFound, ErrorItemNotFound as ErrorItemNotFound, ErrorRecoverableItemsAccessDenied as ErrorRecoverableItemsAccessDenied, InvalidTypeError as InvalidTypeError
from ..fields import CharField as CharField, EWSElementField as EWSElementField, EffectiveRightsField as EffectiveRightsField, Field as Field, FieldPath as FieldPath, IdElementField as IdElementField, IntegerField as IntegerField, InvalidField as InvalidField, PermissionSetField as PermissionSetField
from ..items import CalendarItem as CalendarItem, HARD_DELETE as HARD_DELETE, ITEM_CLASSES as ITEM_CLASSES, RegisterMixIn as RegisterMixIn, SHALLOW as SHALLOW_ITEMS
from ..properties import DistinguishedFolderId as DistinguishedFolderId, EWSMeta as EWSMeta, FolderId as FolderId, Mailbox as Mailbox, ParentFolderId as ParentFolderId, UserConfiguration as UserConfiguration, UserConfigurationName as UserConfigurationName, UserConfigurationNameMNS as UserConfigurationNameMNS
from ..queryset import DoesNotExist as DoesNotExist, SearchableMixIn as SearchableMixIn
from ..util import TNS as TNS, is_iterable as is_iterable, require_id as require_id
from ..version import EXCHANGE_2007_SP1 as EXCHANGE_2007_SP1, EXCHANGE_2010 as EXCHANGE_2010, EXCHANGE_2016 as EXCHANGE_2016, SupportedVersionClassMixIn as SupportedVersionClassMixIn
from .collections import FolderCollection as FolderCollection, PullSubscription as PullSubscription, PushSubscription as PushSubscription, StreamingSubscription as StreamingSubscription, SyncCompleted as SyncCompleted
from .queryset import DEEP as DEEP_FOLDERS, MISSING_FOLDER_ERRORS as MISSING_FOLDER_ERRORS, SingleFolderQuerySet as SingleFolderQuerySet
from _typeshed import Incomplete
from collections.abc import Generator

log: Incomplete
DELETE_FOLDER_ERRORS: Incomplete

class BaseFolder(RegisterMixIn, SearchableMixIn, SupportedVersionClassMixIn, metaclass=EWSMeta):
    ELEMENT_NAME: str
    NAMESPACE = TNS
    DISTINGUISHED_FOLDER_ID: Incomplete
    CONTAINER_CLASS: Incomplete
    supported_item_models = ITEM_CLASSES
    get_folder_allowed: bool
    DEFAULT_FOLDER_TRAVERSAL_DEPTH = DEEP_FOLDERS
    DEFAULT_ITEM_TRAVERSAL_DEPTH = SHALLOW_ITEMS
    LOCALIZED_NAMES: Incomplete
    ITEM_MODEL_MAP: Incomplete
    ID_ELEMENT_CLS = FolderId
    parent_folder_id: Incomplete
    folder_class: Incomplete
    name: Incomplete
    total_count: Incomplete
    child_folder_count: Incomplete
    unread_count: Incomplete
    INSERT_AFTER_FIELD: str
    item_sync_state: Incomplete
    folder_sync_state: Incomplete
    def __init__(self, **kwargs) -> None: ...
    @property
    @abc.abstractmethod
    def account(self): ...
    @property
    @abc.abstractmethod
    def root(self): ...
    @property
    @abc.abstractmethod
    def parent(self): ...
    @property
    def is_distinguished(self): ...
    @property
    def is_deletable(self): ...
    def clean(self, version: Incomplete | None = None) -> None: ...
    @property
    def children(self): ...
    @property
    def parts(self): ...
    @property
    def absolute(self): ...
    def walk(self): ...
    def glob(self, pattern): ...
    def tree(self): ...
    @property
    def has_distinguished_name(self): ...
    @classmethod
    def localized_names(cls, locale): ...
    @staticmethod
    def folder_cls_from_container_class(container_class): ...
    @classmethod
    def item_model_from_tag(cls, tag): ...
    @classmethod
    def allowed_item_fields(cls, version): ...
    def validate_item_field(self, field, version) -> None: ...
    def normalize_fields(self, fields): ...
    @classmethod
    def get_item_field_by_fieldname(cls, fieldname): ...
    def get(self, *args, **kwargs): ...
    def all(self): ...
    def none(self): ...
    def filter(self, *args, **kwargs): ...
    def exclude(self, *args, **kwargs): ...
    def people(self): ...
    def bulk_create(self, items, *args, **kwargs): ...
    changekey: Incomplete
    def save(self, update_fields: Incomplete | None = None): ...
    def move(self, to_folder) -> None: ...
    def delete(self, delete_type=...) -> None: ...
    def empty(self, delete_type=..., delete_sub_folders: bool = False) -> None: ...
    def wipe(self, page_size: Incomplete | None = None, chunk_size: Incomplete | None = None, _seen: Incomplete | None = None, _level: int = 0) -> None: ...
    def test_access(self): ...
    def to_id(self): ...
    @classmethod
    def resolve(cls, account, folder): ...
    def refresh(self): ...
    def get_user_configuration(self, name, properties: Incomplete | None = None): ...
    def create_user_configuration(self, name, dictionary: Incomplete | None = None, xml_data: Incomplete | None = None, binary_data: Incomplete | None = None): ...
    def update_user_configuration(self, name, dictionary: Incomplete | None = None, xml_data: Incomplete | None = None, binary_data: Incomplete | None = None): ...
    def delete_user_configuration(self, name): ...
    def subscribe_to_pull(self, event_types: Incomplete | None = None, watermark: Incomplete | None = None, timeout: int = 60): ...
    def subscribe_to_push(self, callback_url, event_types: Incomplete | None = None, watermark: Incomplete | None = None, status_frequency: int = 1): ...
    def subscribe_to_streaming(self, event_types: Incomplete | None = None): ...
    def pull_subscription(self, **kwargs): ...
    def push_subscription(self, **kwargs): ...
    def streaming_subscription(self, **kwargs): ...
    def unsubscribe(self, subscription_id): ...
    def sync_items(self, sync_state: Incomplete | None = None, only_fields: Incomplete | None = None, ignore: Incomplete | None = None, max_changes_returned: Incomplete | None = None, sync_scope: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
    def sync_hierarchy(self, sync_state: Incomplete | None = None, only_fields: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
    def get_events(self, subscription_id, watermark) -> Generator[Incomplete]: ...
    def get_streaming_events(self, subscription_id_or_ids, connection_timeout: int = 1, max_notifications_returned: Incomplete | None = None) -> Generator[Incomplete]: ...
    def __floordiv__(self, other): ...
    def __truediv__(self, other): ...

class Folder(BaseFolder):
    permission_set: Incomplete
    effective_rights: Incomplete
    def __init__(self, **kwargs) -> None: ...
    @property
    def account(self): ...
    @property
    def root(self): ...
    @classmethod
    def register(cls, *args, **kwargs): ...
    @classmethod
    def deregister(cls, *args, **kwargs): ...
    @property
    def parent(self): ...
    parent_folder_id: Incomplete
    @parent.setter
    def parent(self, value) -> None: ...
    def clean(self, version: Incomplete | None = None) -> None: ...
    @classmethod
    def get_distinguished(cls, root): ...
    @classmethod
    def from_xml_with_root(cls, elem, root): ...
