import abc
from ..errors import InvalidTypeError as InvalidTypeError
from ..fields import FieldPath as FieldPath, InvalidField as InvalidField
from ..items import ID_ONLY as ID_ONLY, Persona as Persona
from ..properties import CalendarView as CalendarView
from ..queryset import Q as Q, QuerySet as QuerySet, SearchableMixIn as SearchableMixIn
from ..restriction import Restriction as Restriction
from ..util import require_account as require_account
from _typeshed import Incomplete
from collections.abc import Generator

log: Incomplete

class SyncCompleted(Exception):
    sync_state: Incomplete
    def __init__(self, sync_state) -> None: ...

class FolderCollection(SearchableMixIn):
    REQUIRED_FOLDER_FIELDS: Incomplete
    account: Incomplete
    def __init__(self, account, folders) -> None: ...
    def folders(self): ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def get(self, *args, **kwargs): ...
    def all(self): ...
    def none(self): ...
    def filter(self, *args, **kwargs): ...
    def exclude(self, *args, **kwargs): ...
    def people(self): ...
    def view(self, start, end, max_items: Incomplete | None = None): ...
    def allowed_item_fields(self): ...
    @property
    def supported_item_models(self): ...
    def validate_item_field(self, field, version) -> None: ...
    def find_items(self, q, shape=..., depth: Incomplete | None = None, additional_fields: Incomplete | None = None, order_fields: Incomplete | None = None, calendar_view: Incomplete | None = None, page_size: Incomplete | None = None, max_items: Incomplete | None = None, offset: int = 0) -> Generator[Incomplete, Incomplete]: ...
    def find_people(self, q, shape=..., depth: Incomplete | None = None, additional_fields: Incomplete | None = None, order_fields: Incomplete | None = None, page_size: Incomplete | None = None, max_items: Incomplete | None = None, offset: int = 0) -> Generator[Incomplete, Incomplete]: ...
    def get_folder_fields(self, target_cls, is_complex: Incomplete | None = None): ...
    def resolve(self) -> Generator[Incomplete, Incomplete]: ...
    def find_folders(self, q: Incomplete | None = None, shape=..., depth: Incomplete | None = None, additional_fields: Incomplete | None = None, page_size: Incomplete | None = None, max_items: Incomplete | None = None, offset: int = 0) -> Generator[Incomplete, Incomplete]: ...
    def get_folders(self, additional_fields: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
    def subscribe_to_pull(self, event_types: Incomplete | None = None, watermark: Incomplete | None = None, timeout: int = 60): ...
    def subscribe_to_push(self, callback_url, event_types: Incomplete | None = None, watermark: Incomplete | None = None, status_frequency: int = 1): ...
    def subscribe_to_streaming(self, event_types: Incomplete | None = None): ...
    def pull_subscription(self, **kwargs): ...
    def push_subscription(self, **kwargs): ...
    def streaming_subscription(self, **kwargs): ...
    def unsubscribe(self, subscription_id): ...
    def sync_items(self, sync_state: Incomplete | None = None, only_fields: Incomplete | None = None, ignore: Incomplete | None = None, max_changes_returned: Incomplete | None = None, sync_scope: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
    def sync_hierarchy(self, sync_state: Incomplete | None = None, only_fields: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...

class BaseSubscription(metaclass=abc.ABCMeta):
    target: Incomplete
    subscription_kwargs: Incomplete
    subscription_id: Incomplete
    def __init__(self, target, **subscription_kwargs) -> None: ...
    @abc.abstractmethod
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs) -> None: ...

class PullSubscription(BaseSubscription):
    def __enter__(self): ...

class PushSubscription(BaseSubscription):
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs) -> None: ...

class StreamingSubscription(BaseSubscription):
    subscription_id: Incomplete
    def __enter__(self): ...
