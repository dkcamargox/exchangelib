import io
from .errors import InvalidTypeError as InvalidTypeError
from .fields import Base64Field as Base64Field, BooleanField as BooleanField, DateTimeField as DateTimeField, EWSElementField as EWSElementField, FieldPath as FieldPath, IdField as IdField, IntegerField as IntegerField, ItemField as ItemField, TextField as TextField, URIField as URIField
from .properties import BaseItemId as BaseItemId, EWSElement as EWSElement, EWSMeta as EWSMeta
from _typeshed import Incomplete

log: Incomplete

class AttachmentId(BaseItemId):
    ELEMENT_NAME: str
    ID_ATTR: str
    ROOT_ID_ATTR: str
    ROOT_CHANGEKEY_ATTR: str
    id: Incomplete
    root_id: Incomplete
    root_changekey: Incomplete

class Attachment(EWSElement, metaclass=EWSMeta):
    attachment_id: Incomplete
    name: Incomplete
    content_type: Incomplete
    content_id: Incomplete
    content_location: Incomplete
    size: Incomplete
    last_modified_time: Incomplete
    is_inline: Incomplete
    parent_item: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def clean(self, version: Incomplete | None = None) -> None: ...
    def attach(self) -> None: ...
    def detach(self) -> None: ...
    def __hash__(self): ...

class FileAttachment(Attachment):
    ELEMENT_NAME: str
    is_contact_photo: Incomplete
    def __init__(self, **kwargs) -> None: ...
    @property
    def fp(self): ...
    @property
    def content(self): ...
    @content.setter
    def content(self, value) -> None: ...
    @classmethod
    def from_xml(cls, elem, account): ...
    def to_xml(self, version): ...

class ItemAttachment(Attachment):
    ELEMENT_NAME: str
    def __init__(self, **kwargs) -> None: ...
    @property
    def item(self): ...
    @item.setter
    def item(self, value) -> None: ...
    @classmethod
    def from_xml(cls, elem, account): ...

class FileAttachmentIO(io.RawIOBase):
    def __init__(self, attachment) -> None: ...
    def readable(self): ...
    @property
    def closed(self): ...
    def readinto(self, b): ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs) -> None: ...
