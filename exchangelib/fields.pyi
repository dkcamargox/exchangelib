import abc
import datetime
from .errors import InvalidTypeError as InvalidTypeError
from .ewsdatetime import EWSDate as EWSDate, EWSDateTime as EWSDateTime, EWSTimeZone as EWSTimeZone, NaiveDateTimeNotAllowed as NaiveDateTimeNotAllowed, UTC as UTC, UnknownTimeZone as UnknownTimeZone
from .util import TNS as TNS, create_element as create_element, get_xml_attr as get_xml_attr, get_xml_attrs as get_xml_attrs, is_iterable as is_iterable, set_xml_value as set_xml_value, value_to_xml_text as value_to_xml_text, xml_text_to_value as xml_text_to_value
from .version import EXCHANGE_2013 as EXCHANGE_2013, SupportedVersionInstanceMixIn as SupportedVersionInstanceMixIn
from _typeshed import Incomplete
from collections.abc import Generator
from decimal import Decimal

log: Incomplete
FIRST: str
SECOND: str
THIRD: str
FOURTH: str
LAST: str
WEEK_NUMBERS: Incomplete
JANUARY: str
FEBRUARY: str
MARCH: str
APRIL: str
MAY: str
JUNE: str
JULY: str
AUGUST: str
SEPTEMBER: str
OCTOBER: str
NOVEMBER: str
DECEMBER: str
MONTHS: Incomplete
MONDAY: str
TUESDAY: str
WEDNESDAY: str
THURSDAY: str
FRIDAY: str
SATURDAY: str
SUNDAY: str
WEEKDAY_NAMES: Incomplete
DAY: str
WEEK_DAY: str
WEEKEND_DAY: str
EXTRA_WEEKDAY_OPTIONS: Incomplete
WEEKDAYS: Incomplete

class InvalidField(ValueError): ...
class InvalidFieldForVersion(ValueError): ...
class InvalidChoiceForVersion(ValueError): ...

def split_field_path(field_path): ...
def resolve_field_path(field_path, folder, strict: bool = True): ...

class FieldPath:
    field: Incomplete
    label: Incomplete
    subfield: Incomplete
    def __init__(self, field, label: Incomplete | None = None, subfield: Incomplete | None = None) -> None: ...
    @classmethod
    def from_string(cls, field_path, folder, strict: bool = False): ...
    def get_value(self, item): ...
    def get_sort_value(self, item): ...
    def to_xml(self): ...
    def expand(self, version) -> Generator[Incomplete]: ...
    @property
    def path(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class FieldOrder:
    field_path: Incomplete
    reverse: Incomplete
    def __init__(self, field_path, reverse: bool = False) -> None: ...
    @classmethod
    def from_string(cls, field_path, folder): ...
    def to_xml(self): ...

class Field(SupportedVersionInstanceMixIn, metaclass=abc.ABCMeta):
    value_cls: Incomplete
    is_list: bool
    is_complex: bool
    name: Incomplete
    default: Incomplete
    is_required: Incomplete
    is_required_after_save: Incomplete
    is_read_only: Incomplete
    is_read_only_after_send: Incomplete
    is_searchable: Incomplete
    is_attribute: Incomplete
    def __init__(self, name: Incomplete | None = None, is_required: bool = False, is_required_after_save: bool = False, is_read_only: bool = False, is_read_only_after_send: bool = False, is_searchable: bool = True, is_attribute: bool = False, default: Incomplete | None = None, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...
    @abc.abstractmethod
    def from_xml(self, elem, account): ...
    @abc.abstractmethod
    def to_xml(self, value, version): ...
    def __eq__(self, other): ...
    @abc.abstractmethod
    def __hash__(self): ...

class FieldURIField(Field):
    field_uri: Incomplete
    namespace: Incomplete
    field_uri_postfix: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...
    def field_uri_xml(self): ...
    def request_tag(self): ...
    def response_tag(self): ...
    def __hash__(self): ...

class BooleanField(FieldURIField):
    value_cls = bool

class IntegerField(FieldURIField):
    value_cls = int
    min: Incomplete
    max: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...

class DecimalField(IntegerField):
    value_cls = Decimal

class EnumField(IntegerField):
    enum: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...
    def as_string(self, value): ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class EnumListField(EnumField):
    is_list: bool

class WeekdaysField(EnumListField):
    def clean(self, value, version: Incomplete | None = None): ...

class EnumAsIntField(EnumField):
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class AppointmentStateField(IntegerField):
    NONE: str
    MEETING: str
    RECEIVED: str
    CANCELLED: str
    STATES: Incomplete
    def from_xml(self, elem, account): ...

class Base64Field(FieldURIField):
    value_cls = bytes
    is_complex: bool
    def __init__(self, *args, **kwargs) -> None: ...

class MimeContentField(Base64Field): ...

class DateField(FieldURIField):
    value_cls = EWSDate
    def clean(self, value, version: Incomplete | None = None): ...

class DateTimeBackedDateField(DateField):
    def __init__(self, *args, **kwargs) -> None: ...
    def date_to_datetime(self, value): ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class TimeField(FieldURIField):
    value_cls = datetime.time
    def from_xml(self, elem, account): ...

class TimeDeltaField(FieldURIField):
    value_cls = datetime.timedelta
    min: Incomplete
    max: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...

class DateTimeField(FieldURIField):
    value_cls = EWSDateTime
    allow_naive: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...
    def from_xml(self, elem, account): ...

class DateOrDateTimeField(DateTimeField):
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...
    def from_xml(self, elem, account): ...

class TimeZoneField(FieldURIField):
    value_cls = EWSTimeZone
    def clean(self, value, version: Incomplete | None = None): ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class TextField(FieldURIField):
    value_cls = str
    is_complex: bool

class TextListField(TextField):
    is_list: bool
    list_elem_name: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def list_elem_request_tag(self): ...
    def list_elem_response_tag(self): ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class MessageField(TextField):
    INNER_ELEMENT_NAME: str
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class CharField(TextField):
    is_complex: bool
    max_length: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...

class IdField(CharField):
    max_length: int
    is_searchable: bool
    is_attribute: bool
    def __init__(self, *args, **kwargs) -> None: ...

class CharListField(TextListField):
    max_length: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...

class URIField(TextField): ...
class EmailAddressField(CharField): ...
class CultureField(CharField): ...

class Choice(SupportedVersionInstanceMixIn):
    value: Incomplete
    def __init__(self, value, *args, **kwargs) -> None: ...

class ChoiceField(CharField):
    choices: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...
    def supported_choices(self, version): ...

FREE_BUSY_CHOICES: Incomplete

class FreeBusyStatusField(ChoiceField):
    def __init__(self, *args, **kwargs) -> None: ...

class BodyField(TextField):
    value_cls: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class EWSElementField(FieldURIField):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def value_cls(self): ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class EWSElementListField(EWSElementField):
    is_list: bool
    is_complex: bool

class TransitionListField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...
    def from_xml(self, elem, account): ...

class AssociatedCalendarItemIdField(EWSElementField):
    is_complex: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def to_xml(self, value, version): ...

class RecurrenceField(EWSElementField):
    is_complex: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def to_xml(self, value, version): ...

class TaskRecurrenceField(EWSElementField):
    is_complex: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def to_xml(self, value, version): ...

class ReferenceItemIdField(EWSElementField):
    is_complex: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def to_xml(self, value, version): ...

class OccurrenceField(EWSElementField):
    is_complex: bool

class OccurrenceListField(OccurrenceField):
    is_list: bool

class MessageHeaderField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...

class BaseEmailField(EWSElementField, metaclass=abc.ABCMeta):
    is_complex: bool
    def clean(self, value, version: Incomplete | None = None): ...
    def from_xml(self, elem, account): ...

class EmailField(BaseEmailField):
    def __init__(self, *args, **kwargs) -> None: ...

class RecipientAddressField(BaseEmailField):
    def __init__(self, *args, **kwargs) -> None: ...

class MailboxField(BaseEmailField):
    def __init__(self, *args, **kwargs) -> None: ...

class MailboxListField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...

class AddressListField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...

class MemberListField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...

class AttendeesField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...

class AttachmentField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...
    def from_xml(self, elem, account): ...

class LabelField(ChoiceField):
    is_attribute: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def from_xml(self, elem, account): ...

class SubField(Field):
    namespace = TNS
    value_cls = str
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...
    @staticmethod
    def field_uri_xml(field_uri, label): ...
    def clean(self, value, version: Incomplete | None = None): ...
    def __hash__(self): ...

class EmailSubField(SubField):
    value_cls = str
    def from_xml(self, elem, account): ...

class NamedSubField(SubField):
    value_cls = str
    field_uri: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...
    def field_uri_xml(self, field_uri, label): ...
    def request_tag(self): ...
    def response_tag(self): ...

class IndexedField(EWSElementField, metaclass=abc.ABCMeta):
    is_list: bool
    is_complex: bool
    PARENT_ELEMENT_NAME: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def to_xml(self, value, version): ...
    def response_tag(self): ...
    def __hash__(self): ...

class SingleFieldIndexedField(IndexedField):
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...

class EmailAddressesField(SingleFieldIndexedField):
    PARENT_ELEMENT_NAME: str
    def __init__(self, *args, **kwargs) -> None: ...

class ImAddressField(SingleFieldIndexedField):
    PARENT_ELEMENT_NAME: str
    def __init__(self, *args, **kwargs) -> None: ...

class PhoneNumberField(SingleFieldIndexedField):
    PARENT_ELEMENT_NAME: str
    def __init__(self, *args, **kwargs) -> None: ...

class PhysicalAddressField(IndexedField):
    is_list: bool
    is_complex: bool
    PARENT_ELEMENT_NAME: str
    def __init__(self, *args, **kwargs) -> None: ...

class ExtendedPropertyField(Field):
    is_complex: bool
    value_cls: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...
    def field_uri_xml(self): ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...
    def __hash__(self): ...

class ExtendedPropertyListField(ExtendedPropertyField):
    is_list: bool

class ItemField(FieldURIField):
    @property
    def value_cls(self): ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class UnknownEntriesField(CharListField):
    def list_elem_tag(self): ...

class PermissionSetField(EWSElementField):
    is_complex: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def to_xml(self, value, version): ...

class EffectiveRightsField(EWSElementField):
    def __init__(self, *args, **kwargs) -> None: ...

class RoutingTypeField(ChoiceField):
    def __init__(self, *args, **kwargs) -> None: ...

class IdElementField(EWSElementField):
    def __init__(self, *args, **kwargs) -> None: ...

class TypeValueField(FieldURIField):
    TYPES_MAP: Incomplete
    TYPES_MAP_REVERSED: Incomplete
    @classmethod
    def get_type(cls, value): ...
    @classmethod
    def is_array_type(cls, value_type): ...
    def clean(self, value, version: Incomplete | None = None): ...
    def from_xml(self, elem, account): ...
    def to_xml(self, value, version): ...

class DictionaryField(FieldURIField):
    value_cls = dict
    def from_xml(self, elem, account): ...
    def clean(self, value, version: Incomplete | None = None): ...
    def to_xml(self, value, version): ...

class PersonaPhoneNumberField(EWSElementField):
    is_complex: bool
    def __init__(self, *args, **kwargs) -> None: ...

class BodyContentAttributedValueField(EWSElementField):
    is_complex: bool
    def __init__(self, *args, **kwargs) -> None: ...

class StringAttributedValueField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...

class PhoneNumberAttributedValueField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...

class EmailAddressAttributedValueField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...

class PostalAddressAttributedValueField(EWSElementListField):
    def __init__(self, *args, **kwargs) -> None: ...

class GenericEventListField(EWSElementField):
    is_list: bool
    value_classes: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def from_xml(self, elem, account): ...

FLAG_ACTION_CHOICES: Incomplete

class FlaggedForActionField(ChoiceField):
    def __init__(self, *args, **kwargs) -> None: ...

IMPORTANCE_CHOICES: Incomplete

class ImportanceField(ChoiceField):
    def __init__(self, *args, **kwargs) -> None: ...

SENSITIVITY_CHOICES: Incomplete

class SensitivityField(ChoiceField):
    def __init__(self, *args, **kwargs) -> None: ...

class FolderActionField(EWSElementField):
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value, version: Incomplete | None = None): ...
