import abc
import requests.adapters
from .credentials import BaseOAuth2Credentials as BaseOAuth2Credentials
from .errors import CASError as CASError, ErrorInternalServerTransientError as ErrorInternalServerTransientError, ErrorInvalidSchemaVersionForMailboxVersion as ErrorInvalidSchemaVersionForMailboxVersion, ErrorServerBusy as ErrorServerBusy, InvalidTypeError as InvalidTypeError, MalformedResponseError as MalformedResponseError, RateLimitError as RateLimitError, RedirectError as RedirectError, RelativeRedirect as RelativeRedirect, SessionPoolMaxSizeReached as SessionPoolMaxSizeReached, SessionPoolMinSizeReached as SessionPoolMinSizeReached, TransportError as TransportError, UnauthorizedError as UnauthorizedError
from .properties import AlternateId as AlternateId, DLMailbox as DLMailbox, ENTRY_ID as ENTRY_ID, EWS_ID as EWS_ID, FreeBusyViewOptions as FreeBusyViewOptions, MailboxData as MailboxData, RoomList as RoomList, TimeWindow as TimeWindow, TimeZone as TimeZone
from .services import ConvertId as ConvertId, ExpandDL as ExpandDL, GetRoomLists as GetRoomLists, GetRooms as GetRooms, GetSearchableMailboxes as GetSearchableMailboxes, GetServerTimeZones as GetServerTimeZones, GetUserAvailability as GetUserAvailability, ResolveNames as ResolveNames
from .transport import CREDENTIALS_REQUIRED as CREDENTIALS_REQUIRED, DEFAULT_HEADERS as DEFAULT_HEADERS, NTLM as NTLM, OAUTH2 as OAUTH2, get_auth_instance as get_auth_instance, get_service_authtype as get_service_authtype
from .util import get_redirect_url as get_redirect_url, is_xml as is_xml
from .version import Version as Version
from _typeshed import Incomplete

log: Incomplete

def close_connections() -> None: ...

class BaseProtocol(metaclass=abc.ABCMeta):
    SESSION_POOLSIZE: int
    CONNECTIONS_PER_SESSION: int
    MAX_SESSION_USAGE_COUNT: Incomplete
    TIMEOUT: int
    RETRY_WAIT: int
    HTTP_ADAPTER_CLS: Incomplete
    USERAGENT: Incomplete
    config: Incomplete
    def __init__(self, config) -> None: ...
    @property
    def service_endpoint(self): ...
    @abc.abstractmethod
    def get_auth_type(self): ...
    @property
    def auth_type(self): ...
    @property
    def credentials(self): ...
    @credentials.setter
    def credentials(self, value) -> None: ...
    @property
    def max_connections(self): ...
    @max_connections.setter
    def max_connections(self, value) -> None: ...
    @property
    def retry_policy(self): ...
    @property
    def server(self): ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    @classmethod
    def get_adapter(cls): ...
    @property
    def session_pool_size(self): ...
    def increase_poolsize(self) -> None: ...
    def decrease_poolsize(self) -> None: ...
    def get_session(self): ...
    def release_session(self, session) -> None: ...
    def close_session(self, session) -> None: ...
    def retire_session(self, session) -> None: ...
    def renew_session(self, session): ...
    def refresh_credentials(self, session): ...
    def create_session(self): ...
    def create_oauth2_session(self): ...
    @classmethod
    def raw_session(cls, prefix, oauth2_client: Incomplete | None = None, oauth2_session_params: Incomplete | None = None, oauth2_token_endpoint: Incomplete | None = None): ...

class CachingProtocol(type):
    def __call__(cls, *args, **kwargs): ...
    def __getitem__(cls, config): ...
    def __delitem__(cls, config) -> None: ...
    @classmethod
    def clear_cache(mcs) -> None: ...

class Protocol(BaseProtocol, metaclass=CachingProtocol):
    api_version_hint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_auth_type(self): ...
    @property
    def version(self): ...
    def get_timezones(self, timezones: Incomplete | None = None, return_full_timezone_data: bool = False): ...
    def get_free_busy_info(self, accounts, start, end, merged_free_busy_interval: int = 30, requested_view: str = 'DetailedMerged'): ...
    def get_roomlists(self): ...
    def get_rooms(self, roomlist): ...
    def resolve_names(self, names, parent_folders: Incomplete | None = None, return_full_contact_data: bool = False, search_scope: Incomplete | None = None, shape: Incomplete | None = None): ...
    def expand_dl(self, distribution_list): ...
    def get_searchable_mailboxes(self, search_filter: Incomplete | None = None, expand_group_membership: bool = False): ...
    def convert_ids(self, ids, destination_format): ...
    def dummy_xml(self): ...

class NoVerifyHTTPAdapter(requests.adapters.HTTPAdapter):
    def cert_verify(self, conn, url, verify, cert) -> None: ...
    def get_connection_with_tls_context(self, request, verify, proxies: Incomplete | None = None, cert: Incomplete | None = None): ...

class TLSClientAuth(requests.adapters.HTTPAdapter):
    cert_file: Incomplete
    def init_poolmanager(self, *args, **kwargs): ...

class RetryPolicy(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def fail_fast(self): ...
    @property
    @abc.abstractmethod
    def back_off_until(self): ...
    @back_off_until.setter
    @abc.abstractmethod
    def back_off_until(self, value): ...
    @abc.abstractmethod
    def back_off(self, seconds): ...
    def raise_response_errors(self, response) -> None: ...

class FailFast(RetryPolicy):
    @property
    def fail_fast(self): ...
    @property
    def back_off_until(self) -> None: ...
    def back_off(self, seconds) -> None: ...

class FaultTolerance(RetryPolicy):
    DEFAULT_BACKOFF: int
    max_wait: Incomplete
    def __init__(self, max_wait: int = 3600) -> None: ...
    @property
    def fail_fast(self): ...
    @property
    def back_off_until(self): ...
    @back_off_until.setter
    def back_off_until(self, value) -> None: ...
    def back_off(self, seconds) -> None: ...
    def raise_response_errors(self, response): ...
