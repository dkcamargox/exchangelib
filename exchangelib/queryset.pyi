import abc
from .errors import DoesNotExist as DoesNotExist, ErrorItemNotFound as ErrorItemNotFound, InvalidEnumValue as InvalidEnumValue, InvalidTypeError as InvalidTypeError, MultipleObjectsReturned as MultipleObjectsReturned
from .fields import FieldOrder as FieldOrder, FieldPath as FieldPath
from .items import CalendarItem as CalendarItem, ID_ONLY as ID_ONLY
from .properties import InvalidField as InvalidField
from .restriction import Q as Q
from .version import EXCHANGE_2010 as EXCHANGE_2010
from _typeshed import Incomplete

log: Incomplete
MISSING_ITEM_ERRORS: Incomplete

class SearchableMixIn(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def get(self, *args, **kwargs): ...
    @abc.abstractmethod
    def all(self): ...
    @abc.abstractmethod
    def none(self): ...
    @abc.abstractmethod
    def filter(self, *args, **kwargs): ...
    @abc.abstractmethod
    def exclude(self, *args, **kwargs): ...
    @abc.abstractmethod
    def people(self): ...

class QuerySet(SearchableMixIn):
    VALUES: str
    VALUES_LIST: str
    FLAT: str
    NONE: str
    RETURN_TYPES: Incomplete
    ITEM: str
    PERSONA: str
    REQUEST_TYPES: Incomplete
    folder_collection: Incomplete
    request_type: Incomplete
    q: Incomplete
    only_fields: Incomplete
    order_fields: Incomplete
    return_format: Incomplete
    calendar_view: Incomplete
    page_size: Incomplete
    chunk_size: Incomplete
    max_items: Incomplete
    offset: int
    def __init__(self, folder_collection, request_type=...) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, idx_or_slice): ...
    def all(self): ...
    def none(self): ...
    def filter(self, *args, **kwargs): ...
    def exclude(self, *args, **kwargs): ...
    def people(self): ...
    def only(self, *args): ...
    def order_by(self, *args): ...
    def reverse(self): ...
    def values(self, *args): ...
    def values_list(self, *args, **kwargs): ...
    def depth(self, depth): ...
    def get(self, *args, **kwargs): ...
    def count(self, page_size: int = 1000): ...
    def exists(self): ...
    def delete(self, page_size: int = 1000, chunk_size: int = 100, **delete_kwargs): ...
    def send(self, page_size: int = 1000, chunk_size: int = 100, **send_kwargs): ...
    def copy(self, to_folder, page_size: int = 1000, chunk_size: int = 100, **copy_kwargs): ...
    def move(self, to_folder, page_size: int = 1000, chunk_size: int = 100): ...
    def archive(self, to_folder, page_size: int = 1000, chunk_size: int = 100): ...
    def mark_as_junk(self, page_size: int = 1000, chunk_size: int = 1000, **mark_as_junk_kwargs): ...
